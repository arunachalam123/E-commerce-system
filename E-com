Our HTML page is a basic page, with tags for external JavaScript and CSS referenced in the head.

<!doctype html>

<html lang="en-US">

<head>

<title>HTML5 Local Storage Project</title>

<meta charset="UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<meta name="rating" content="General">

<meta name="expires" content="never">

<meta name="language" content="English, EN">

<meta name="description" content="Shopping cart project with HTML5 and JavaScript">

<meta name="keywords" content="HTML5,CSS,JavaScript, html5 session storage, html5 local storage">

<meta name="author" content="dcwebmakers.com">

<script src="Storage.js"></script>

<link rel="stylesheet" href="StorageStyle.css">

</head>

Below is the HTML content that appears in the page’s body:

<form name="ShoppingList">

<fieldset>

<legend>Shopping cart</legend>

<label>Item: <input type="text" name="name"></label>

<label>Quantity: <input type="text" name="data"></label>

<input type="button" value="Save" onclick="SaveItem()">

<input type="button" value="Update" onclick="ModifyItem()">

<input type="button" value="Delete" onclick="RemoveItem()">

</fieldset>

<div id="items_table">

<h2>Shopping List</h2>

<table id="list"></table>

<label><input type="button" value="Clear" onclick="ClearAll()">

* Delete all items</label>

</div>

</form>

Adding JavaScript To The Shopping Cart #

We’ll create and call the JavaScript function doShowAll() in the onload() event to check for browser support and to dynamically create the table that shows the storage name-value pair.

<body onload="doShowAll()">

Copy

Alternatively, you can use the JavaScript onload event by adding this to the JavaScript code:

window.load=doShowAll();

Or use this for jQuery:

$( window ).load(function() {

doShowAll();

});

In the CheckBrowser() function, we would like to check whether the browser supports HTML5 storage. Note that this step might not be required because most modern web browsers support it.

/*

=====> Checking browser support.

//This step might not be required because most modern browsers do support HTML5.

*/

//Function below might be redundant.

function CheckBrowser() {

if ('localStorage' in window && window['localStorage'] !== null) {

// We can use localStorage object to store data.

return true;

} else {

return false;

}

}

Inside the doShowAll(), if the CheckBrowser() function evaluates first for browser support, then it will dynamically create the table for the shopping list during page load. You can iterate the keys (property names) of the key-value pairs stored in local storage inside a JavaScript loop, as shown below. Based on the storage value, this method populates the table dynamically to show the key-value pair stored in local storage.

// Dynamically populate the table with shopping list items.

//Step below can be done via PHP and AJAX, too.

function doShowAll() {

if (CheckBrowser()) {

var key = "";

var list = "<tr><th>Item</th><th>Value</th></tr>\n";

var i = 0;

//For a more advanced feature, you can set a cap on max items in the cart.

for (i = 0; i <= localStorage.length-1; i++) {

key = localStorage.key(i);

list += "<tr><td>" + key + "</td>\n<td>"

+ localStorage.getItem(key) + "</td></tr>\n";

}

//If no item exists in the cart.

if (list == "<tr><th>Item</th><th>Value</th></tr>\n") {

list += "<tr><td><i>empty</i></td>\n<td><i>empty</i></td></tr>\n";

}

//Bind the data to HTML table.

//You can use jQuery, too.

document.getElementById('list').innerHTML = list;

} else {

alert('Cannot save shopping list as your browser does not support HTML 5');

}

}

Run And Test The Shopping Cart #

In the previous two sections, we added code to the HTML head, and we added HTML to the shopping cart form and basket. We also created a JavaScript function to check for browser support and to populate the basket with the items in the cart. In populating the basket items, the JavaScript fetches values from HTML web storage, instead of a database. In this part, we’ll show you how the data are inserted into the HTML5 storage engine. That is, we’ll use HTML5 local storage in conjunction with JavaScript to insert new items to the shopping cart, as well as edit an existing item in the cart.

We’ll create a separate HTML div element to capture user input and submission. We’ll attach the corresponding JavaScript function in the onClick event for the buttons.

<input type="button" value="Save" onclick="SaveItem()">

<input type="button" value="Update" onclick="ModifyItem()">

<input type="button" value="Delete" onclick="RemoveItem()">

You can set properties on the localStorage object similar to a normal JavaScript object. Here is an example of how we can set the local storage property myProperty to the value myValue:

localStorage.myProperty="myValue";

Copy

You can delete local storage property like this:

delete localStorage.myProperty;

Alternately, you can use the following methods to access local storage:

localStorage.setItem('propertyName','value'

localStorage.getItem('propertyName')

localStorage.removeItem('propertyName');

To save the key-value pair, get the value of the corresponding JavaScript object and call the setItem method:

function SaveItem() {

var name = document.forms.ShoppingList.name.value;

var data = document.forms.ShoppingList.data.value;

localStorage.setItem(name, data);

doShowAll();

}

Below is the jQuery alternative for the SaveItem function. First, add an ID to the form inputs:

<label>Item: <input type="text" name="name" id="name"></label>

<label>Quantity: <input type="text" name="data" id="data"></label>

Copy

Then, select the form inputs by ID, and get their values. As you can see below, it is much simpler than JavaScript:

function SaveItem() {

var name = $("#name").val();

var data = $("#data").val();

localStorage.setItem(name, data);

doShowAll();

}

Copy

To update an item in the shopping cart, you have to first check whether that item’s key already exists in local storage, and then update its value, as shown below:

//Change an existing key-value in HTML5 storage.

function ModifyItem() {

var name1 = document.forms.ShoppingList.name.value;

var data1 = document.forms.ShoppingList.data.value;

//check if name1 is already exists

//Check if key exists.

if (localStorage.getItem(name1) !=null)

{

//update

localStorage.setItem(name1,data1);

document.forms.ShoppingList.data.value = localStorage.getItem(name1);

}

doShowAll();

}

Copy

Below shows the jQuery alternative.

function ModifyItem() {

var name1 = $("#name").val();

var data1 = $("#data").val();

//Check if name already exists.

//Check if key exists.

if (localStorage.getItem(name1) !=null)

{

//update

localStorage.setItem(name1,data1);

var new_info=localStorage.getItem(name1);

$("#data").val(function RemoveItem()

{

var name=document.forms.ShoppingList.name.value;

document.forms.ShoppingList.data.value=localStorage.removeItem(name);

doShowAll();

There is another method for local storage that allows you to clear the entire local storage. We call the ClearAll() function in the onClick event of the “Clear” button:

<input type="button" value="Clear" onclick="ClearAll()">

Copy

We use the clear method to clear the local storage, as shown below:

function ClearAll() {

localStorage.clear();

doShowAll();

}

Copy

Session Storage #

The sessionStorage object works in the same way as localStorage. You can replace the above example with the sessionStorage object to expire the data after one session. Once the user closes the browser window, the storage will be cleared. In short, the APIs for localStorage and sessionStorage are identical, allowing you to use the following methods:

setItem(key, value)

getItem(key)

removeItem(key)

clear()

key(index)

length.   

Shopping Carts With Arrays And Objects #

Because HTML5 web storage only supports single name-value storage, you have to use JSON or another method to convert your arrays or objects into a single string. You might need an array or object if you have a category and subcategories of items, or if you have a shopping cart with multiple data, like customer info, item info, etc. You just need to implode your array or object items into a string to store them in web storage, and then explode (or split) them back to an array to show them on another page. Let’s go through a basic example of a shopping cart that has three sets of info: customer info, item info and custom mailing address. First, we use JSON.stringify to convert the object into a string. Then, we use JSON.parse to reverse it back.

//Customer info

//You can use array in addition to object.

var obj1 = { firstname: "John", lastname: "thomson" };

var cust = JSON.stringify(obj1);

//Mailing info

var obj2 = { state: "VA", city: "Arlington" };

var mail = JSON.stringify(obj2);

//Item info

var obj3 = { item: "milk", quantity: 2 };

var basket = JSON.stringify(obj3);

//Next, push three strings into key-value of HTML5 storage.

//Use JSON parse function below to convert string back into object or array.

var New_cust=JSON.parse(cust);

..

}

;;);e');

..
